// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model Customers {
//   id        BigInt    @id @default(autoincrement())
//   name      String
//   email     String
//   phone     String
//   branch    String
//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt
// }


generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   @default(cuid())
  role          String    @default("USER")
  center        String?
  survies       Survey[]
  privilages    String? @default("WRITE,READ") // EDIT DELETE DOWNLOAD
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Survey {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorEmail String
  isReviewed Boolean? @default(false)
  reviewerName String?
  reviewerNote String?
  reviewedDate DateTime?
  applicantName String?
  answers   Answer[]
  status    String? @default("PUBLISHED") // PUBLISHED, DRAFT, DELETED, FINALIZED
  isFinalized Boolean? @default(true)
  author     User @relation(fields: [authorEmail], references: [email])
  deletedAt DateTime?
  applicantId String?
  @@index([authorEmail])
}
model Answer {
  id             String @id @default(cuid()) // ANSWER ID NOT VERY IMPORTANT
  content        String @db.LongText // ANSWER CONTENT
  questionNumber Int // QUESTION ID
  surveyId       String 
  survey         Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([surveyId])
}